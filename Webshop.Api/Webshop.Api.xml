<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Webshop.Api</name>
    </assembly>
    <members>
        <member name="M:Webshop.Api.Controllers.AuthController.IsEmailTaken(Webshop.Api.Models.Dto.User.EmailQueryDto,System.Threading.CancellationToken)">
            <summary>
                Checks whether an email address is already used by another user in the database
            </summary>
            <param name="query">
                Query parameter containing the email address to check against the database
            </param>
            <param name="cancellationToken">
                Token for cancelling the request. This token is provided by the framework itself
            </param>
            <returns>
                Whether the email address is taken or not
            </returns>
            <response code="200">
                Returns the boolean result
            </response>
            <response code="400">
                If provided query parameter is not an email address
            </response>
        </member>
        <member name="M:Webshop.Api.Controllers.AuthController.Register(Webshop.Api.Models.Dto.User.RegisterDto,System.Threading.CancellationToken)">
            <summary>
                Creates a new application user in the database
            </summary>
            <param name="model">
                User information for registration
            </param>
            <param name="cancellationToken">
                Token for cancelling the request. This token is provided by the framework itself
            </param>
            <returns>
                No content
            </returns>
            <response code="204">
                Registration was successful
            </response>
            <response code="400">
                If validation fails or email address is already taken
            </response>
        </member>
        <member name="M:Webshop.Api.Controllers.AuthController.Login(Webshop.Api.Models.Dto.User.LoginDto,System.Threading.CancellationToken)">
            <summary>
                Checks a users credentials against the database and returns user information alongside a valid JWT token.
            </summary>
            <param name="model">
                Login credentials
            </param>
            <param name="cancellationToken">
                Token for cancelling the request. This token is provided by the framework itself
            </param>
            <returns>
                User information + Valid JWT Token
            </returns>
            <response code="200">
                Returns user information alongside a valid JWT token
            </response>
            <response code="400">
                If validation fails or credentials are incorrect
            </response>
        </member>
        <member name="M:Webshop.Api.Controllers.OrderController.GetOrders(System.Threading.CancellationToken)">
            <summary>
                Returns a list of orders placed by the user
            </summary>
            <param name="cancellationToken">
                Token for cancelling the request. This token is provided by the framework itself
            </param>
            <returns>
                List of orders
            </returns>
            <response code="200">
                Returns list of orders
            </response>
        </member>
        <member name="M:Webshop.Api.Controllers.OrderController.Checkout(Webshop.Api.Models.Dto.Order.OrderDto,System.Threading.CancellationToken)">
            <summary>
                Checks out the users cart and places orders accordingly
            </summary>
            <param name="model">
                Payment method information
            </param>
            <param name="cancellationToken">
                Token for cancelling the request. This token is provided by the framework itself
            </param>
            <returns>
                Placed order
            </returns>
            <response code="200">
                Returns the created order
            </response>
            <response code="400">
                If validation fails
            </response>
        </member>
        <member name="M:Webshop.Api.Controllers.ProductController.GetProducts(Webshop.Api.Models.Dto.Product.ProductQueryDto,System.Threading.CancellationToken)">
            <summary>
                Returns a list of products and filters them according to a given query
            </summary>
            <param name="query">
                Query parameters containing the filter term for filtering products
            </param>
            <param name="cancellationToken">
                Token for cancelling the request. This token is provided by the framework itself
            </param>
            <returns>
                List of products
            </returns>
            <response code="200">
                Returns a filtered list of products
            </response>
            <response code="400">
                If validation of query parameters fails
            </response>
        </member>
        <member name="M:Webshop.Api.Controllers.ProductController.GetProductsDetails(System.Int32,System.Threading.CancellationToken)">
            <summary>
                Returns a single product by its ID number
            </summary>
            <param name="productId">
                ID number of product to get
            </param>
            <param name="cancellationToken">
                Token for cancelling the request. This token is provided by the framework itself
            </param>
            <returns>
                Single product by its ID
            </returns>
            <response code="200">
                Returns product details
            </response>
            <response code="400">
                If validation fails
            </response>
            <response code="404">
                If given product doesn't exist
            </response>
        </member>
        <member name="M:Webshop.Api.Controllers.ReviewController.GetReviews(System.Int32)">
            <summary>
                Returns a list of reviews for a given product
            </summary>
            <param name="productId">
                ID number of product to get reviews of
            </param>
            <returns>
                List of reviews for given product
            </returns>
            <response code="200">
                Returns list of review for given product
            </response>
            <response code="400">
                If validation fails
            </response>
        </member>
        <member name="M:Webshop.Api.Controllers.ReviewController.CreateReview(System.Int32,Webshop.Api.Models.Dto.Review.ReviewDto,System.Threading.CancellationToken)">
            <summary>
                Creates a review to a product in the database
            </summary>
            <param name="productId">
                ID number of product to review
            </param>
            <param name="model">
                Information about the review
            </param>
            <param name="cancellationToken">
                Token for cancelling the request. This token is provided by the framework itself
            </param>
            <returns>
                Created review
            </returns>
            <response code="200">
                Returns the created review
            </response>
            <response code="400">
                If validation fails
            </response>
            <response code="401">
                If the user is not the author of the review
            </response>
            <response code="404">
                If given product doesn't exist
            </response>
        </member>
        <member name="M:Webshop.Api.Controllers.ReviewController.EditReview(System.Int32,Webshop.Api.Models.Dto.Review.ReviewDto,System.Threading.CancellationToken)">
            <summary>
                Edits an existing review to a product
            </summary>
            <param name="id">
                ID number of review to edit
            </param>
            <param name="model">
                Information about the updated review
            </param>
            <param name="cancellationToken">
                Token for cancelling the request. This token is provided by the framework itself
            </param>
            <returns>
                The updated review
            </returns>
            <response code="200">
                Edit of review was successfull. Review is returned
            </response>
            <response code="400">
                If validation fails
            </response>
            <response code="401">
                If the user is not the author of the review 
            </response>
            <response code="404">
                If give review doesn't exist
            </response>
        </member>
        <member name="M:Webshop.Api.Controllers.ReviewController.RemoveReview(System.Int32,System.Threading.CancellationToken)">
            <summary>
                Deletes a review to a product and returns its ID number
            </summary>
            <param name="id">
                ID number of review to delete
            </param>
            <param name="cancellationToken">
                Token for cancelling the request. This token is provided by the framework itself
            </param>
            <returns>
                ID number of removed entity
            </returns>
            <response code="200">
                Deletion of review was successfull. ID number is returned
            </response>
            <response code="400">
                If validation fails
            </response>
            <response code="401">
                If the user is not the author of the review
            </response>
            <response code="404">
                If given review doesn't exist
            </response>
        </member>
        <member name="M:Webshop.Api.Controllers.WishlistController.GetWishlist(System.Threading.CancellationToken)">
            <summary>
                Returns a list of products on a users wishlist
            </summary>
            <param name="cancellationToken">
                Token for cancelling the request. This token is provided by the framework itself
            </param>
            <returns>
                List of products on the users wishlist
            </returns>
            <response code="200">
                Returns list of wishlist items
            </response>
        </member>
        <member name="M:Webshop.Api.Controllers.WishlistController.AddWishlistItem(System.Int32,System.Threading.CancellationToken)">
            <summary>
                Adds a product to a users wishlist
            </summary>
            <param name="productId">
                ID number of the product to add to the wishlist
            </param>
            <param name="cancellationToken">
                Token for cancelling the request. This token is provided by the framework itself
            </param>
            <returns>
                Created resource
            </returns>
            <response code="200">
                Returns the added wishlist item
            </response>
            <response code="400">
                If validation fails
            </response>
            <response code="404">
                If given product doesn't exist
            </response>
        </member>
        <member name="M:Webshop.Api.Controllers.WishlistController.RemoveWishlistItem(System.Int32,System.Threading.CancellationToken)">
            <summary>
                Removes a product from a users wishlist
            </summary>
            <param name="id">
                Id of the wishlist item to remove
            </param>
            <param name="cancellationToken">
                Token for cancelling the request. This token is provided by the framework itself
            </param>
            <returns>
                ID number of removed wishlist item
            </returns>
            <response code="200">
                Removal of wishlist item was successfull
            </response>
            <response code="400">
                If validation fails
            </response>
            <response code="404">
                If given wishlist item doesn't exist
            </response>
        </member>
    </members>
</doc>
